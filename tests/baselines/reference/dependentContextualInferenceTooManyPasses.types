=== tests/cases/compiler/dependentContextualInferenceTooManyPasses.ts ===
declare const f:
>f : <T extends F<T>>(t: T) => T

  <T extends F<T>>(t: T) => T
>t : T

type F<T> =
>F : F<T>

  { a: unknown
>a : unknown

  , b: (a: T["a" & keyof T]) => unknown
>b : (a: T["a" & keyof T]) => unknown
>a : T["a" & keyof T]

  , c: (b: ReturnType<Extract<T["b" & keyof T], (...a: never[]) => unknown>>) => unknown
>c : (b: ReturnType<Extract<T["b" & keyof T], (...a: never[]) => unknown>>) => unknown
>b : ReturnType<Extract<T["b" & keyof T], (...a: never[]) => unknown>>
>a : never[]

  , d: (c: ReturnType<Extract<T["c" & keyof T], (...a: never[]) => unknown>>) => unknown
>d : (c: ReturnType<Extract<T["c" & keyof T], (...a: never[]) => unknown>>) => unknown
>c : ReturnType<Extract<T["c" & keyof T], (...a: never[]) => unknown>>
>a : never[]

  , e: (d: ReturnType<Extract<T["d" & keyof T], (...a: never[]) => unknown>>) => unknown
>e : (d: ReturnType<Extract<T["d" & keyof T], (...a: never[]) => unknown>>) => unknown
>d : ReturnType<Extract<T["d" & keyof T], (...a: never[]) => unknown>>
>a : never[]
  }

f({
>f({  a: ({ value: "a" as "a" }),  b: x => ({ value: x.value  }),  c: x => ({ value: x.value  }),  d: x => ({ value: x.value  }),  e: x => ({ value: x.value  }),}) : { a: { value: "a"; }; b: (x: { value: "a"; }) => { value: "a"; }; c: (x: { value: "a"; }) => { value: "a"; }; d: (x: { value: "a"; }) => { value: "a"; }; e: (x: { value: "a"; }) => { value: any; }; }
>f : <T extends F<T>>(t: T) => T
>{  a: ({ value: "a" as "a" }),  b: x => ({ value: x.value  }),  c: x => ({ value: x.value  }),  d: x => ({ value: x.value  }),  e: x => ({ value: x.value  }),} : { a: { value: "a"; }; b: (x: { value: "a"; }) => { value: "a"; }; c: (x: { value: "a"; }) => { value: "a"; }; d: (x: { value: "a"; }) => { value: "a"; }; e: (x: { value: "a"; }) => { value: "a"; }; }

  a: ({ value: "a" as "a" }),
>a : { value: "a"; }
>({ value: "a" as "a" }) : { value: "a"; }
>{ value: "a" as "a" } : { value: "a"; }
>value : "a"
>"a" as "a" : "a"
>"a" : "a"

  b: x => ({ value: x.value  }),
>b : (x: { value: "a"; }) => { value: "a"; }
>x => ({ value: x.value  }) : (x: { value: "a"; }) => { value: "a"; }
>x : { value: "a"; }
>({ value: x.value  }) : { value: "a"; }
>{ value: x.value  } : { value: "a"; }
>value : "a"
>x.value : "a"
>x : { value: "a"; }
>value : "a"

  c: x => ({ value: x.value  }),
>c : (x: { value: "a"; }) => { value: "a"; }
>x => ({ value: x.value  }) : (x: { value: "a"; }) => { value: "a"; }
>x : { value: "a"; }
>({ value: x.value  }) : { value: "a"; }
>{ value: x.value  } : { value: "a"; }
>value : "a"
>x.value : "a"
>x : { value: "a"; }
>value : "a"

  d: x => ({ value: x.value  }),
>d : (x: { value: "a"; }) => { value: "a"; }
>x => ({ value: x.value  }) : (x: { value: "a"; }) => { value: "a"; }
>x : { value: "a"; }
>({ value: x.value  }) : { value: "a"; }
>{ value: x.value  } : { value: "a"; }
>value : "a"
>x.value : "a"
>x : { value: "a"; }
>value : "a"

  e: x => ({ value: x.value  }),
>e : (x: { value: "a"; }) => { value: "a"; }
>x => ({ value: x.value  }) : (x: { value: "a"; }) => { value: "a"; }
>x : { value: "a"; }
>({ value: x.value  }) : { value: "a"; }
>{ value: x.value  } : { value: "a"; }
>value : "a"
>x.value : "a"
>x : { value: "a"; }
>value : "a"

})

